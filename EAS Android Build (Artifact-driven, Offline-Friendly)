 - name: Read EAS Project ID from frontend/app.json
    id: read_id
    run: |
      sudo apt-get update && sudo apt-get install -y jq
      APP_JSON=./frontend/app.json
      if [ ! -f "$APP_JSON" ]; then echo "frontend/app.json not found" && exit 1; fi
      PROJECT_ID=$(cat "$APP_JSON" | jq -r '.expo.extra.eas.projectId // empty')
      if [ -z "$PROJECT_ID" ]; then echo "Missing projectId in app.json (.expo.extra.eas.projectId)" && exit 1; fi
      echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT

  - name: Trigger EAS Build via GraphQL v2 (no npm installs)
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      EAS_PROJECT_ID: ${{ steps.read_id.outputs.project_id }}
      EAS_PROFILE: ${{ inputs.BUILD_PROFILE }}
    run: |
      if [ -z "$EXPO_TOKEN" ]; then
        echo "Missing EXPO_TOKEN secret. Add repo secret EXPO_TOKEN (expo access token)." && exit 1
      fi
      cat > graphql.json <<'EOF'
      {
        "query": "mutation CreateBuild($input: CreateBuildInput!) { createBuild(input: $input) { build { id status platform } } }",
        "variables": {
          "input": {
            "appId": "__APP_ID__",
            "platform": "ANDROID",
            "profile": "__PROFILE__"
          }
        }
      }
      EOF
      sed -i "s/__APP_ID__/${EAS_PROJECT_ID}/" graphql.json
      sed -i "s/__PROFILE__/${EAS_PROFILE}/" graphql.json
      echo "Triggering EAS Android Build for project $EAS_PROJECT_ID (profile=$EAS_PROFILE)"
      curl -f -sS \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${EXPO_TOKEN}" \
        -X POST \
        --data @graphql.json \
        https://api.expo.dev/v2/graphql | tee build_trigger_response.json

  - name: Parse build id
    id: parse
    run: |
      BUILD_ID=$(cat build_trigger_response.json | python3 -c "import sys, json; d=json.load(sys.stdin); print(d['data']['createBuild']['build']['id'])")
      echo "build_id=${BUILD_ID}" >> $GITHUB_OUTPUT

  - name: Poll build status
    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      BUILD_ID: ${{ steps.parse.outputs.build_id }}
    run: |
      echo "Polling build status for ${BUILD_ID}..."
      for i in $(seq 1 60); do
        echo "Attempt $i"
        curl -f -sS \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${EXPO_TOKEN}" \
          -X POST \
          --data "{\"query\":\"query BuildById($id: ID!) { build(id: $id) { id status artifacts { buildUrl } } }\",\"variables\":{\"id\":\"${BUILD_ID}\"}}" \
          https://api.expo.dev/v2/graphql | tee build_status.json
        STATUS=$(cat build_status.json | python3 -c "import sys, json; d=json.load(sys.stdin); print(d['data']['build']['status'])")
        echo "Status: ${STATUS}"
        if [ "${STATUS}" = "FINISHED" ]; then
          URL=$(cat build_status.json | python3 -c "import sys, json; d=json.load(sys.stdin); print((d['data']['build']['artifacts'] or {}).get('buildUrl',''))")
          echo "apk_url=${URL}" >> $GITHUB_OUTPUT
          echo "APK URL: ${URL}" >> $GITHUB_STEP_SUMMARY
          exit 0
        elif [ "${STATUS}" = "ERRORED" ]; then
          echo "Build failed" && cat build_status.json && exit 1
        fi
        sleep 10
      done
      echo "Timeout waiting for build"; exit 1
