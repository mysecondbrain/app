name: EAS Android Preview (APK)

on:
  workflow_dispatch:
  push:
    branches:
      - clean/offline-first-orphan
    paths:
      - 'frontend/**'
      - '.github/workflows/eas-preview-android.yml'

jobs:
  build-android-apk:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: frontend/yarn.lock

      - name: Enable corepack
        run: corepack enable

      - name: Install deps
        run: yarn install --frozen-lockfile || yarn install

      - name: Install Expo plugins (best-effort)
        run: |
          npx expo install --non-interactive \
            expo-av expo-image-manipulator expo-document-picker expo-file-system \
            expo-sharing expo-secure-store expo-sqlite expo-random @shopify/flash-list || true

      - name: Login to EAS
        env:
          EAS_TOKEN: ${{ secrets.EAS_TOKEN }}
        run: |
          npx eas whoami || npx eas login --token "$EAS_TOKEN"

      - name: Build preview APK
        env:
          EAS_TOKEN: ${{ secrets.EAS_TOKEN }}
        run: |
          npx eas build -p android --profile preview --non-interactive --json > build.json

      - name: Extract APK URL
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          URL=$(jq -r '.[0].artifacts.buildUrl // .artifacts.buildUrl // empty' build.json)
          if [ -z "$URL" ]; then
            URL=$(jq -r '.artifacts.buildUrl // empty' build.json)
          fi
          echo "APK_URL=$URL" >> $GITHUB_ENV
          printf "%s\n" "$URL" > apk-url.txt

      - name: Show APK URL
        run: echo "APK URL: $APK_URL"

      - name: Upload artifact (APK URL)
        uses: actions/upload-artifact@v4
        with:
          name: apk-url
          path: apk-url.txt
